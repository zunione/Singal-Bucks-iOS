// SingalBucksApp.swift
// Ïï±Ïùò Î©îÏù∏ ÏßÑÏûÖÏ†ê - ÏïàÎìúÎ°úÏù¥ÎìúÏùò MainActivityÏôÄ Ïú†ÏÇ¨Ìïú Ïó≠Ìï†
// Firebase Ï¥àÍ∏∞Ìôî Î∞è Ïï± ÎùºÏù¥ÌîÑÏÇ¨Ïù¥ÌÅ¥ Í¥ÄÎ¶¨

import SwiftUI
import Firebase

// MARK: - Î©îÏù∏ Ïï± Íµ¨Ï°∞Ï≤¥
@main
struct SingalBucksApp: App {
    
    // Ïï± Îç∏Î¶¨Í≤åÏù¥Ìä∏ Ïó∞Í≤∞ (Firebase ÏÑ§Ï†ïÏö©)
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .preferredColorScheme(.light) // ÎùºÏù¥Ìä∏ Î™®Îìú Í≥†Ï†ï
        }
    }
}

// MARK: - Ïï± Îç∏Î¶¨Í≤åÏù¥Ìä∏ (Firebase Ï¥àÍ∏∞Ìôî)
class AppDelegate: NSObject, UIApplicationDelegate {
    
    func application(_ application: UIApplication,
                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        
        // Firebase Ï¥àÍ∏∞Ìôî - PythonÏùò init_firebase()ÏôÄ ÎèôÏùº
        FirebaseApp.configure()
        
        print("üî• Firebase Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
        
        return true
    }
}

// MARK: - Î©îÏù∏ ÏΩòÌÖêÏ∏† Î∑∞
struct ContentView: View {
    
    // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ïï± Î™®Îìú
    @State private var selectedApp: AppMode? = nil
    
    var body: some View {
        Group {
            if let selectedApp = selectedApp {
                // ÏÑ†ÌÉùÎêú Ïï± ÌôîÎ©¥ ÌëúÏãú
                switch selectedApp {
                case .customer:
                    OrderView()
                        .transition(.slide)
                case .kitchen:
                    KitchenView()
                        .transition(.slide)
                }
            } else {
                // Ïï± ÏÑ†ÌÉù ÌôîÎ©¥
                AppSelectionView(selectedApp: $selectedApp)
            }
        }
        .animation(.easeInOut(duration: 0.3), value: selectedApp)
    }
}

// MARK: - Ïï± Î™®Îìú Ïó¥Í±∞Ìòï
enum AppMode: String, CaseIterable {
    case customer = "customer"
    case kitchen = "kitchen"
    
    var displayName: String {
        switch self {
        case .customer: return "Í≥†Í∞ùÏö© Ï£ºÎ¨∏"
        case .kitchen: return "Ï£ºÎ∞© Í¥ÄÎ¶¨"
        }
    }
    
    var icon: String {
        switch self {
        case .customer: return "cup.and.saucer.fill"
        case .kitchen: return "chef.hat.fill"
        }
    }
    
    var description: String {
        switch self {
        case .customer: return "ÏùåÎ£åÏôÄ Í∞ÑÏãùÏùÑ Ï£ºÎ¨∏ÌïòÏÑ∏Ïöî"
        case .kitchen: return "Ï£ºÎ¨∏ÏùÑ ÌôïÏù∏ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî"
        }
    }
    
    var color: Color {
        switch self {
        case .customer: return .blue
        case .kitchen: return .orange
        }
    }
}

// MARK: - Ïï± ÏÑ†ÌÉù ÌôîÎ©¥
struct AppSelectionView: View {
    @Binding var selectedApp: AppMode?
    
    var body: some View {
        NavigationView {
            VStack(spacing: 40) {
                
                // Ïï± Î°úÍ≥† Î∞è Ï†úÎ™©
                VStack(spacing: 20) {
                    // Î°úÍ≥† (Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎã§Î©¥ ÍµêÏ≤¥)
                    Image(systemName: "cup.and.saucer.fill")
                        .font(.system(size: 80))
                        .foregroundColor(.brown)
                    
                    Text("Singal Bucks")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(.primary)
                    
                    Text("iPad Ï†ÑÏö© Ïπ¥Ìéò Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                
                // Ïï± Î™®Îìú ÏÑ†ÌÉù Ïπ¥ÎìúÎì§
                VStack(spacing: 20) {
                    ForEach(AppMode.allCases, id: \.self) { mode in
                        AppModeCard(mode: mode) {
                            selectedApp = mode
                        }
                    }
                }
                
                Spacer()
                
                // ÌïòÎã® Ï†ïÎ≥¥
                VStack(spacing: 8) {
                    Text("Í∞úÎ∞úÏûê: Ïã†Í∞àÎ≤ÖÏä§ ÌåÄ")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Text("Î≤ÑÏ†Ñ 1.0.0")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            .padding()
            .navigationTitle("")
            .navigationBarHidden(true)
        }
        .navigationViewStyle(StackNavigationViewStyle())
    }
}

// MARK: - Ïï± Î™®Îìú ÏÑ†ÌÉù Ïπ¥Îìú
struct AppModeCard: View {
    let mode: AppMode
    let action: () -> Void
    
    @State private var isPressed = false
    
    var body: some View {
        Button(action: {
            // ÌñÖÌã± ÌîºÎìúÎ∞± (ÏßÑÎèô)
            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
            impactFeedback.impactOccurred()
            
            action()
        }) {
            HStack(spacing: 20) {
                // ÏïÑÏù¥ÏΩò
                Image(systemName: mode.icon)
                    .font(.system(size: 40))
                    .foregroundColor(mode.color)
                    .frame(width: 60, height: 60)
                
                // ÌÖçÏä§Ìä∏ Ï†ïÎ≥¥
                VStack(alignment: .leading, spacing: 8) {
                    Text(mode.displayName)
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.primary)
                    
                    Text(mode.description)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.leading)
                }
                
                Spacer()
                
                // ÌôîÏÇ¥Ìëú
                Image(systemName: "chevron.right")
                    .font(.title3)
                    .foregroundColor(.secondary)
            }
            .padding(24)
            .background(
                RoundedRectangle(cornerRadius: 16)
                    .fill(Color(.systemBackground))
                    .shadow(
                        color: mode.color.opacity(0.3),
                        radius: isPressed ? 8 : 4,
                        x: 0,
                        y: isPressed ? 4 : 2
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
        .scaleEffect(isPressed ? 0.98 : 1.0)
        .onLongPressGesture(minimumDuration: 0, maximumDistance: .infinity, pressing: { pressing in
            withAnimation(.easeInOut(duration: 0.1)) {
                isPressed = pressing
            }
        }, perform: {})
    }
}

// MARK: - Preview
#Preview("Ïï± ÏÑ†ÌÉù ÌôîÎ©¥") {
    AppSelectionView(selectedApp: .constant(nil))
}

#Preview("Í≥†Í∞ùÏö© Ïï±") {
    OrderView()
}

#Preview("Ï£ºÎ∞©Ïö© Ïï±") {
    KitchenView()
}
